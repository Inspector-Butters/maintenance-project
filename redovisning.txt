u57

Det står i makefile achievement:en:

För att redovisa målet måste du bland annat redovisa just beroenden, eftersom det är det som make löser. 
Det betyder att ha byggregler som beror av varandra.
 om A är beroende av B, vi ändrar A men inte B skall bara A kompileras om, inte B.

Syftet med make är att bygga samman ett antal olika självständiga filer.
Till exempel så kräver 


mål: beroende
  recept
 

Ett make-mål består av ett antal olika beroenden och ett recept på hur de ska kompileras och länkas ihop.
Till exempel så har db-målet tre objekt filer som nästan aldrig ändras 
och därmed behövs de inte framställas om och om igen varje gång db skapas
Dessa beroenden i sin tur kan vara andra mål eller filer.
Om något mål är äldre än dess c eller h fil, så måste den även framställas på nytt
När alla beroenden är framställda så kan man slutligen framställa målet med det givna receptet.


+++++

d9

Det är svårt att balansera mängden dokumentation som krävs för att beskriva något. Vem vänder man sig till? Vad kan man förvänta sig hos den som läser? Vad vill denne åstadkomma?
Vad är en bra balans mellan för lite information och för mycket? Vad är en lämplig detaljnivå?
Hur mycket av den interna implementationen bör man beskriva? Varför?
Hur beskriver man komplexa och tvetydiga processer?

Jag följde en mall som innehöll brief, param, return och pre. 
Min brief beskrev på ett top-down sätt vad som sker i funktionen, om det fanns en algoritm att beskriva.
Return innehöll retur-värdet av funktionen.  


+++++


k30


När jag började göra uppgift två så fanns det en klar distinktion mellan frontend och backend i problembeskrivningen
men det var även möjligt att  dela backend i ytterligare i: backend, shopping cart, shelf, merch.
Jag avstod dock från att göra en sådan uppdelning eftersom det finns många funktioner som kräver 
att man når carts, shelfs, webstores och merchs fält variabler samtidigt.
Att göra en sådan uppdelning skulle resultera i en mängd olika getter och setter funktioner 
Därför valde jag att implementera hela webstore logiken i filen backend. 
Det finns flera funktioner som är självständiga men det finns även många andra som kräver alla fyraa strukter

När jag och min tidigare labbpartner gjorde hash table så valde vi att göra separata filer för iterator
och därmed flera olika filer som både linkedlist och iterator använder. jag valde i denna uppgift att förena
linkedlist och iterator eftersom iterator har sin begynnelse i linkedlist och de är väldigt sammankopplade.

Det fanns även ett antal utility och check funktioner från hash table och några nya från inlämning två.
Dessa används både i frontend och backend så jag valde att göra en sådan modul i samma anda som inl1

h18 